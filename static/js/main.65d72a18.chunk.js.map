{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","screenValue","setscreenValue","resetValue","setresetValue","buttonClicked","e","operator","pressed","target","value","includes","length","slice","tempScreenvalue","presentOperator","op","indexOf","gotOperator","eval","index","className","type","disabled","map","num","onClick"],"mappings":"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","file":"static/js/main.65d72a18.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  let [screenValue, setscreenValue] = useState(\"0\");\r\n  let [resetValue, setresetValue] = useState(false);\r\n\r\n  const buttonClicked = (e) => {\r\n    const operator = [\"%\", \"/\", \"*\", \"-\", \"+\"];\r\n    const pressed = e.target.value;\r\n    if (resetValue) {\r\n      if (!operator.includes(pressed)) {\r\n        screenValue = \"0\";\r\n      }\r\n      setresetValue(false);\r\n    }\r\n\r\n    if (screenValue === \"Infinity\" || screenValue === \"NaN\") {\r\n      if (operator.includes(pressed)) {\r\n        setscreenValue(\"0\" + pressed);\r\n      } else {\r\n        setscreenValue(pressed);\r\n      }\r\n    } else if (pressed === \"C\") {\r\n      setscreenValue(\"0\");\r\n    } else if (pressed === \"D\") {\r\n      screenValue.length <= 1\r\n        ? setscreenValue(\"0\")\r\n        : setscreenValue(screenValue.slice(0, screenValue.length - 1));\r\n    } else if (pressed === \".\") {\r\n      let tempScreenvalue = screenValue;\r\n      if (screenValue[0] === \"-\") {\r\n        tempScreenvalue = screenValue.slice(1, screenValue.length);\r\n      }\r\n      let presentOperator = \"\";\r\n      for (const op of operator) {\r\n        if (tempScreenvalue.includes(op)) {\r\n          presentOperator = op;\r\n          break;\r\n        }\r\n      }\r\n      if (presentOperator === \"\") {\r\n        if (!tempScreenvalue.includes(\".\")) {\r\n          setscreenValue(screenValue + pressed);\r\n        }\r\n      } else {\r\n        if (\r\n          !tempScreenvalue\r\n            .slice(\r\n              tempScreenvalue.indexOf(presentOperator) + 1,\r\n              tempScreenvalue.length\r\n            )\r\n            .includes(\".\")\r\n        ) {\r\n          if (tempScreenvalue[tempScreenvalue.length - 1] === presentOperator) {\r\n            setscreenValue(screenValue + \"0\" + pressed);\r\n          } else {\r\n            setscreenValue(screenValue + pressed);\r\n          }\r\n        }\r\n      }\r\n    } else if (operator.includes(pressed)) {\r\n      if (operator.includes(screenValue[screenValue.length - 1])) {\r\n        screenValue = screenValue.slice(0, screenValue.length - 1) + pressed;\r\n      } else {\r\n        let gotOperator = false;\r\n        let tempScreenvalue = screenValue;\r\n        if (screenValue[0] === \"-\") {\r\n          tempScreenvalue = screenValue.slice(1, screenValue.length);\r\n        }\r\n        for (const op of operator) {\r\n          if (tempScreenvalue.includes(op)) {\r\n            screenValue = eval(screenValue) + pressed;\r\n            gotOperator = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!gotOperator) {\r\n          screenValue += pressed;\r\n        }\r\n      }\r\n      setscreenValue(screenValue);\r\n    } else if (pressed === \"=\") {\r\n      setresetValue(true);\r\n      setscreenValue(eval(screenValue) + \"\");\r\n    } else {\r\n      if (screenValue === \"0\") {\r\n        if (pressed === \"00\") {\r\n          screenValue = \"0\";\r\n        } else {\r\n          screenValue = pressed;\r\n        }\r\n      } else {\r\n        let presentOperator = \"\";\r\n        let tempScreenvalue = screenValue;\r\n        if (screenValue[0] === \"-\") {\r\n          tempScreenvalue = screenValue.slice(1, screenValue.length);\r\n        }\r\n        for (let op of operator) {\r\n          if (tempScreenvalue.includes(op)) {\r\n            presentOperator = op;\r\n            break;\r\n          }\r\n        }\r\n        if (presentOperator === \"\") {\r\n          screenValue += pressed;\r\n        } else {\r\n          const index = tempScreenvalue.indexOf(presentOperator);\r\n          if (index === tempScreenvalue.length - 1) {\r\n            if (pressed === \"00\") {\r\n              screenValue += \"0\";\r\n            } else {\r\n              screenValue += pressed;\r\n            }\r\n          } else if (index === tempScreenvalue.length - 2) {\r\n            if (tempScreenvalue[index + 1] === \"0\") {\r\n              if (pressed === \"0\" || pressed === \"00\") {\r\n              } else {\r\n                screenValue =\r\n                  screenValue.slice(0, screenValue.length - 1) + pressed;\r\n              }\r\n            } else {\r\n              screenValue += pressed;\r\n            }\r\n          } else {\r\n            screenValue += pressed;\r\n          }\r\n        }\r\n      }\r\n      setscreenValue(screenValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"screen\">\r\n        <input type=\"text\" disabled={true} value={screenValue} />\r\n      </div>\r\n      {[\"%\", \"C\", \"D\", \"/\", \"7\", \"8\", \"9\", \"*\", \"4\",\"5\",\"6\",\"-\",\"1\",\"2\",\"3\",\"+\",\"00\",\"0\",\".\",\"=\",].map((num) => {\r\n        return (\r\n          <button key={num} className=\"button disable-select\" value={num} onClick={buttonClicked} >\r\n            {num}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}